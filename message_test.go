package dhcp

import (
	"testing"
)

var (
	testDataMessageRelease  = []byte{0x01, 0x01, 0x06, 0x00, 0x96, 0x1e, 0x34, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xa8, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x29, 0x9a, 0x37, 0xdf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x82, 0x53, 0x63, 0x35, 0x01, 0x07, 0x36, 0x04, 0xc0, 0xa8, 0x00, 0x50, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	testDataMessageDiscover = []byte{0x01, 0x01, 0x06, 0x00, 0x13, 0x46, 0x34, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x29, 0x9a, 0x37, 0xdf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x82, 0x53, 0x63, 0x35, 0x01, 0x01, 0x39, 0x02, 0x05, 0xdc, 0x3c, 0x33, 0x64, 0x68, 0x63, 0x70, 0x63, 0x64, 0x2d, 0x35, 0x2e, 0x35, 0x2e, 0x34, 0x3a, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x2d, 0x33, 0x2e, 0x32, 0x2e, 0x38, 0x2d, 0x31, 0x2d, 0x41, 0x52, 0x43, 0x48, 0x3a, 0x78, 0x38, 0x36, 0x5f, 0x36, 0x34, 0x3a, 0x47, 0x65, 0x6e, 0x75, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x0c, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x37, 0x0f, 0x01, 0x79, 0x21, 0x03, 0x06, 0x0c, 0x0f, 0x1a, 0x1c, 0x2a, 0x33, 0x36, 0x3a, 0x3b, 0x77, 0xff}
)

func TestReadMessageRelease(t *testing.T) {
	msg, err := ReadMessage(testDataMessageRelease)
	if err != nil {
		t.Fatal(err)
	}

	if msg.Type != MessageTypeRequest {
		t.Fatalf("Type should be Request but got %q", msg.Type)
	}

	if msg.HardwareType != MessageHardwareTypeEthernet {
		t.Fatalf("HardwareType should be Ethernet but got %q", msg.HardwareType)
	}

	if msg.HardwareAddressLength != 6 {
		t.Fatalf("HardwareAddressLength should be 6 but got %q", msg.HardwareAddressLength)
	}

	if msg.Hops != 0 {
		t.Fatal("Hops should be 0")
	}

	if msg.TransactionID != 0x961e34c0 {
		t.Fatal("Transaction ID is wrong!")
	}

	if msg.Flags != 0x0000 {
		t.Fatal("Flags")
	}

	if msg.ClientIPAdress.String() != "192.168.0.160" {
		t.Fatal("ClientIPAddress")
	}

	if msg.YourIPAddress.String() != "0.0.0.0" {
		t.Fatal("YourIPAddress")
	}

	if msg.NextServerIPAddress.String() != "0.0.0.0" {
		t.Fatal("NextServerIPAddress")
	}

	if msg.RelayIPAddress.String() != "0.0.0.0" {
		t.Fatal("RelayIPAddress")
	}

	if msg.ClientMAC.String() != "00:0c:29:9a:37:df" {
		t.Fatal("ClientMAC")
	}

	if msg.ServerHostName != "" {
		t.Fatalf("ServerHostName invalid got %q", msg.ServerHostName)
	}

	if msg.File != "" {
		t.Fatal("File")
	}

	if opt, ok := msg.Options[OptionCodeDHCPMessageType]; !ok || opt.Value[0] != 0x07 {
		t.Fatal("Option[DHCP Message Type] missing or wrong value!")
	}

	if opt, ok := msg.Options[OptionCodeDHCPServerIdentifier]; !ok || opt.Length != 0x04 {
		t.Fatal("Option[DHCP Server Identifier]")
	}
}

func TestReadMessageDiscover(t *testing.T) {
	msg, err := ReadMessage(testDataMessageDiscover)
	if err != nil {
		t.Fatal(err)
	}

	if msg.Type != MessageTypeRequest {
		t.Fatalf("Type should be Request but got %q", msg.Type)
	}

	if msg.HardwareType != MessageHardwareTypeEthernet {
		t.Fatalf("HardwareType should be Ethernet but got %q", msg.HardwareType)
	}

	if msg.HardwareAddressLength != 6 {
		t.Fatalf("HardwareAddressLength should be 6 but got %q", msg.HardwareAddressLength)
	}

	if msg.Hops != 0 {
		t.Fatal("Hops should be 0")
	}

	if msg.TransactionID != 0x13463428 {
		t.Fatal("Transaction ID is wrong!")
	}

	if msg.Flags != 0x0000 {
		t.Fatal("Flags")
	}

	if msg.ClientIPAdress.String() != "0.0.0.0" {
		t.Fatal("ClientIPAddress")
	}

	if msg.YourIPAddress.String() != "0.0.0.0" {
		t.Fatal("YourIPAddress")
	}

	if msg.NextServerIPAddress.String() != "0.0.0.0" {
		t.Fatal("NextServerIPAddress")
	}

	if msg.RelayIPAddress.String() != "0.0.0.0" {
		t.Fatal("RelayIPAddress")
	}

	if msg.ClientMAC.String() != "00:0c:29:9a:37:df" {
		t.Fatal("ClientMAC")
	}

	if msg.ServerHostName != "" {
		t.Fatalf("ServerHostName invalid got %q", msg.ServerHostName)
	}

	if msg.File != "" {
		t.Fatal("File")
	}

	if opt, ok := msg.Options[OptionCodeDHCPMessageType]; !ok || opt.Value[0] != DHCPMessageTypeDiscover {
		t.Fatal("Option[DHCP Message Type] missing or wrong value!")
	}

  if opt, ok := msg.Options[OptionCodeDHCPParameterRequestList]; !ok || opt.Value[9] != OptionCodeNetworkTimeProtocolServers {
    t.Fatal("Option[DHCP Parameter Request List] missing or wrong value!")
  }
}
